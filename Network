DAY 1 ### NETWORK FUNDAMENTALS ###
Mathematics of Networking

Binary Identification
- Bit is on/off 



Number of Bits 
1          Bit/Flag
4          Nibble
8          Byte/Octet
16         Half Word
32         Word
64         Very Long Word


Common Formats
BASE(N) FORMATS
Base(2) = 0101010101
Base(10) = 66 97 193 115 935
Base(16) = 42 61 73 1A 4D
Base(64) = QmFzZSA2NA==

Message Formatting Method
Encapsulation and Decapsulation
- When tansfering data, layer headers on taken off when they hit their respective layers
- Same when getting ready to send data, it covers the data with the appropriate layers 

RFC(REQUEST FOR COMMENT)
- text file that goes in depth of certain topic 
- standard for information

OSI MODEL
Physical Layer
- Hardware Specifications 
- Encoding and Signaling 
- Data Transmission and Reception
- Physical Network Design

Data Link Sub-Layers
Two Types
- MAC (Media Access Control)
- LLC (Logical Link Control)

Ethernet Header
- Dest. MAC [01 - 06]
- Src. MAC [07 - 12]
- Ethertype [13 - 14] ## is important since it shows the next layer type 

if you use a VLAN Ethertype it will add 4 bytes 
- Tag Protocol ID (0x8100)
- PCP/DEI (3 bits)
- QoS (1 bit)
- VLAN ID (12 bits)

ARP Header in Slides

ECN Bit Shift for actual number ??
DSCP is 3 Nibbles and ECN is 1 Nibble

Network Header
How to calculate fragementation offset Formula (Miro Ship Example)

Fingerprinting 
Gives best guess of OS with the Networking Standard

ICMP is ping but also other things
ping is two types of ICMP traffic Echo Request/Echo Reply

Transport Layer
two transporting types (TCP and UDP)
- TCP Flags are important since they start the three-way handshake

TCP Flags 

Coach Explained to the University of Alabama to Play Really Strong Football
TCP Flag Breakout (Binary and Hex)
CWR == 0x128
ECN == 0x64
URG == 0x32
ACK == 0x16
PSH == 0x08
RST == 0x04
SYN == 0x02
FIN == 0x01

UDP Header


Sesion Layer
Protocols
- SOCKS
- NetBIOS
- PPTP/L2TP
- RPC

SOCKS 4/5 (TCP 1080)

PPTP (TCP 1723)

L2TP (TCP 1701)

SMB/CIFS (TCP 139/445 AND UDP 137/138)

RPC (ANY PORT)

PRESENTATION LAYER
Responsibilites
- Translation
- Formating 
- Encoding (ASCII,EBCDIC,HEX,BASE64)
- Encryption (Symmetric or Asymmetric)
### Symmetric easier to decrypt
### Asymmetric Longer to decode but no previous log on required 
- Compression

Application Layer
FTP (TCP 20/21)

Servers is a socket, what makes a server a server is the listening port on the box 

FTP needs both port 20 and 21 to work

Network Traffic Sniffing 
- Libpcap ("Linux")
- WinPcap
- NPCAP ("Current for Windows")

Userspace is anything the current user has logged into 

Wireshark, TCPDUMP and BPFS
Wireshark (options)
- protocol heiarchy
- go to wireshark preferences to see wihj mods you enjoy
- you shouldn't be able to see any traffic

BERKELEY PACKET FILTERS 
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'
- looks for IPv4 Packets but not port 22 or 23
- do it through network layers, checks the ethertype and the dest. bytes 

tcpdump -r "PCAP" 'tcp[13] & 0x10 = 0x10'

tcpdump -r "PCAP" 'ip[1] & 0xFC = 4'


ARP Filter
- To find the ARP STORM find the MAC Addr Broadcasting to all
- You can also find MitM attacks if you look at traffic and see which one is directing a MAC to another location then intended
  EX: 7014 | fa:16:3e:35:21:5a | fa:16:3e:b3:e4:46 | ARP | 42 | 172.16.1.254 is at fa:16:3e:35:21:5a

Gratuitous ARP opcode is 0x02
RARP request opcode is 0x03
RARP response opcode is 0x04
To use opcodes with arp.opcode == 0x0#

CDP is Cisco Discovery Protocol ### shows Cisco Version info

Link Layer Discovery Protocol

STP is Spanning Tree Protocol
- to find the root bridge protocol priority go to Bridge Identifiers for number

Windows Sends all Keyboard values for ping messages 

ICMPv6 type #
type 128 - echo request 
type 129 - echo reply
type 134 - Router Advertisement






(9,99,99,88,214,137) these 6 numbers following in the servers response break down as follows:

First 4 are the ip address: 9.99.99.88 

The fifth and sixth numbers are the port. You take the fifth number multiply it by 256 then add the sixth number:

214 * 256 = 54784 + 137 = 54921

tls.handshake.type == 1





 student13

Command: ssh student@10.50.43.2 -X

Password: password


sudo tcpdump -r BPFCheck.pcap 'ip[6] & 64 = 64 ' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ip[8] <= 64 || ip6[7] <=64' | wc -l

sudo tcpdump -r BPFCheck.pcap 'tcp[0:2] > 1024 || udp[0:2] > 1024' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ip[9] = 0x11 || ip6[6] = 0x11' | wc -l

sudo tcpdump -r BPFCheck.pcap 'tcp[13] = 0x14 || tcp[13] = 0x11' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ip[4:2] = 213' | wc -l
- IP ID number
sudo tcpdump -r BPFCheck.pcap 'tcp[0:2] = 53 || udp[0:2] = 53 || tcp[2:2] = 53 || udp[2:2] = 53' | wc -l

sudo tcpdump -r BPFCheck.pcap 'tcp[0:2] > 1024 || tcp[2:2] > 1024 && tcp[13] = 0x02' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ip[6] & 0x80 = 0x80' | wc -l


sudo tcpdump -r BPFCheck.pcap 'ip[1] & 252 = 148' | wc -l

or

sudo tcpdump -r BPFCheck.pcap 'ip[1] >> 2  = 37' | wc -l



sudo tcpdump -r BPFCheck.pcap 'ip[9] = 1 && ip[8] = 1 ||  ip[9] = 17 && ip[8] = 1 ' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ip[16:4] = 0x0a0a0a0a && tcp[13] = 0x00' | wc -l

sudo tcpdump -r BPFCheck.pcap 'ether[12:4] & 0xffff0fff = 0x81000001 && ether[16:4] & 0xffff0fff = 0x8100000a' | wc -l


https://www.gigamon.com/content/dam/resource-library/english/guide---cookbook/gu-bpf-reference-guide-gigamon-insight.pdf
- Useful for BPF Commands and Options 

https://github.com/SergK/cheatsheat-tcpdump/blob/master/tcpdump_advanced_filters.txt
- Cheatsheet for tcpdump


DAY 2 ###NETWORK PROGRAMMING###
Objectives
Understand a Network Socket
The difference between User and Kernel Sockets
Write a Python 3 script to use Sockets

Socket Types 
Stream Sockets(TCP)
Datagram Sockets(UDP)
Raw Sockets(Custom/Anything)


User Space VS Kernel Space Sockets 
1. User Space Sockets 
    - Stream Sockets
    - Datagram Sockets
2. Kernel Space Sockets
    - Raw Sockets

User Space Applications/Sockets Examples:
- Using tcpdump or wireshark to read a file 
- Using nmap with no switches
- Using netcat to connect to a listener
- Using netcat to create listener above well port range

Kernel Space Application/Sockets 
- Using tcpdump or wireshark to CAPTURE packets on the wire
- Using nmap for OS identification 


Understanding Python Terminology 
Libraries - importing desired functions you want to use



Network Programming with Python3 
how to use python3 in networking: 
import socket 
S = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)

socket.socket function 

Raw Socket Use Case 
- Testing specific defense mechanisms - suxh as triggering and IDS for an effect or filtering
- Avoiding Defense Mechanisms
- Obfuscating data transfer 

DAY 3 ###NETWORK RECONNAISSANCE###
Types of reconnaissance
- Active
- Passive
Type of reconnaissance modes 
- Internal
- External

Active External Recon
- Network Scanning

Active Internal Recon
- DNS Queries
- ARP Request

Passive External Recon
- DNS Lookups 
- Whois Queries 
- Job Site Listings

Passive Internal Recon
- Packet Sniffers 

Passive Internal Recon 
- Wireshark/tcpdump

Passive External Recon
- whois queries ex: whois <domain name>
Unix tool dig
- dig @ns1.google.com AXFR google.com
  o AXFR is Zone Transfer for Googles DNS Server
  o If it worked, would give information about IPs and what happens inside Server
  o can also write command like: dig @8.8.8.8 google.com
  o Like the first bullet, you can specify zones for IP/Domain ex: SOA, A, AAAA, PTR, MX, TXT, AXFR, CNAME, RP
  o dig axfr @nsztm1.digi.ninja zonetransfer.me shows traffic between primary and secondary DNS server which gives hostnames, IPs, and IP blocks 
Google Dorking
- site:google filetype:pdf "policy" "password" - can help with bruteforcing passwords if password policy is weak enough
Shodan
- Shows vulnerabilities 
WhatsMyName Web
- Scans for Usernames on web 

Active External Recon
Network Scanning
 - Remote to Local
 - Local to Remote
 - Local to Local
 - Remote to Remote 
Scanning Approach
- Aim
  o Wide range scan
  o Target specific scan
- Method 
  o Single Source Scan
  o Distributed Scan

Network Scanning
- Broadcast Ping and Ping sweep
- ARP scan
- SYN scan (sends a SYN and waits for SYN,ACK to be recieved NMAP
- Full Connect scan (Three-Way Handshake, for ACK
- Null Scan
- FIN scan (if recieve a RST it means port is closed, If not port is either open or not setup)
- XMAS tree scan 
- UDP scan
- Idle scan ( A.K.A Zombie Scan, Uses other host as proxy so doesn't show the main actor scanning also like a stealth scan waiting for RST or SYN,ACK)
- Ack/Window scan ( uses window size to see if ports are open,closed or filtered can be unreliable )
- Creates other source address, so you cant find the actor
- OS Fingerprinting scan ( gives best guess on target computer)
- version scan (gives version of protocol/service) -sV

Network Scanning - Code
 nmap [options] [Target IP/Subnet]
 or
 nc [options] [Target IP] [Port]


#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done
# (-v) running verbosely (-v on Linux, -vv on Windows),
# (-n) not resolving names. numeric only IP(no D.S)
# (-z) without sending any data. zero-I/O mode(used for scanning)
#(-w1) waiting no more than 1second for a connection to occur
# (2>&1) redirect STDERR to STDOUT. Results of scan are errors and need to redirect to output to grep
# (-E) Interpret PATTERN as an extended regular expression
# ( | grep open) for Debian to display only open connections
# ( | grep succeeded) for Ubuntu to display only the open connections

10.50 in the virtual environment is a "public IP addr"
10.50 IP in the Real World is a public IP so don't scan

How to Enumerate 
Run Net_Scan script
- First 3 Octets
- Last Octet range 
- Port Numbers

use netcat to make sure protocol is what it is 
  - nc [Target IP] [Port]
If it is not responding see if it is a websever by doing  GET /

Run 
nmap -A -T4 --min-rate 10000 -vvvv 10.50.30.212 - 216, -p 80 (use -p to specify certain port) (can also delimit ports and works with range )
 - Port option 1-443 starts at 1 goes to 443
 - Port option 1- goes to all port starts at 1
 - Port option -443 starts at 1 goes to 443


wget -r ftp://10.50.30.212

wget -r 10.50.30.212 ### If needing to specify a port use :P# after IP

eom 10.50.30.212/web.png

ssh bob@10.50.30.212 -p 25
pw:password

local enumeration 
ip address
ip a replaces ifconfig
ip neigh replaces arp
ip route replcaes route 

ls /usr/share/cctc
cat /etc/services : services 

cat /etc/hosts : local host

ss replaces netstat
ss -ntulp (sudo for servives)

all authentication will be logged in auth.log

how to find hostname 
- cmd: hostname or hostname -f for fully qualified host name 

premiscious mode accepts all packets lol

hostname -I shows all interfaces connected 


mimeopen -d

DAY 4 ###DATA TRANSFER MOVEMENT,REDIRECTION, AND DATA TRANSFER###

Common Methods For Transfering Data 
 - TFTP
 - FTP
    o Active
    o Passive
 - SFTP
 - SCP

Trivial File Transfer Protocol (TFTP)
 - UDP transport
 - No terminal communication
 - Often uused for technologies such as BOOTP and PXE
 - No directory services 

File Transfer Protocol (FTP)
 - Uses multiple TCP connections
 - Control Connection Port 21 / Data Connection Port 20
 - Has Directory services

Secure File Transfer Protocol
 - TCP Port 22 
 - Uses symmetric and asymmetric encryption
 - Adds FTP like services to SSH 
 - Authentication required

File Transfer Protocol Secure
 - Can be operated in 2 modes: Implicit


Secure Copy Protocol
 - TCP Port 22
 - Uses symmetric and asymmettric encryption
 - Authentication through sign in (username and password) or with SSH key
 - Non Interactive
 - CMD EX: scp <source> <destination>
 - specify a port with -P option CMD EX: scp -P <port> <source> <destination>
 - specify recursive CMD EX: scp -r <source> <destination>
 - SCP three-way handshake CMD EX: scp -3 <source> <destination>


 SCP Examples 

 copy all files in a directory
 scp -r /etc/ssh clarie@claire-host: 

 grab toby's .bash_profile and put it into the local machine
 scp toby@toby-host:.bash_profile .

specifiy a port 
scp -P 2222 test.txt clarie@claire-host:

grabs claries etc/ssh config and moves it to the sshconfigs in toby's directory
scp -3 -r clarie@claire-host:/etc/ssh toby@toby-host:sshconfigs/


SCP 

Netcat
- Netcat is the "swiss army knife" networking utility which reads and writes data across network socket connections using the TCP/IP protocol
Netcat can be used for the following
 - inbound and outbound connections, TCP/UDP, to/or from any ports
 - troubleshooting network connections
 - sending/recieving data (insecurely)
 - port scanning (similar to -sT in Nmap)

root permissions
ssh into desired host and run command 
nc -lp <port> -e /bin/bash 

run on local machine
nc <ip> <port> 

netcat relay 
make a named pipe
make node <name> <p option>

mknod mypipe p

create relay

nc -lp 3333 0<mypipe | nc -lp 3334 1>mypipe

set up netcat on devices you want to relay with
nc <ip> 3333
nc <ip> 3334

you can communicate between the port 3333 and 3334

sudo vim 

type sh for commands? 
nc -lp 3333 -e /bin/bash

if the box doesn't have netcat you can use /dev/tcp/10.2.0.2/1111

SSH Tunneling 

Secure SHell (SSH)
 - provides authentication, encryption and integrity
 - rsh, replaced with ssh, provides a channel for running a shell on a remote computer

 SSH Port Forwarding
 - cat . ssh/authorized_keys

 - .ssh/known_host

 - ls /etc/ssh for key_info

SSH Port Fowarding 

ihost@ihost-hostname | toby@tobyhostname | john@john-hostname | carlton@carlton-hostname 

ssh <user>@<hostname or ip> -L <port>:<Target hostname or ip>:<Target Port>

if usng alternate ssh port 

ssh -p <port> <user>@<hostname or ip> -L <port>:<Target hostname or ip>:<Target Port>


ssh toby@toby-host -L 17200:127.0.0.1:80
Authenticationg to toby machine, opening a random high port on our machine and loopback ip to port 80 which fowards and receives traffic on port 80 on toby host


ssh 127.0.0.1:17200

3 Host port fowarding 
ssh toby@toby-host -L 17200:<john-host ip>:1111
open a port on our local machine (17200), and we want to forward traffic (not authenticate) to ssh port 1111 on john 
ssh -p 17200 john@127.0.0.1
test port foward for john
jhost maybe?

4 host port fowarding 
ssh -p 17200 john@127.0.0.1 -L 17201:<Carlton IP>:23
puts on the Carlton IP
telnet 127.0.0.1 17201
Test for Carlton

SSH Remote Port Fowarding

chost>
ssh john@john-host -p 1111 -R 17299:127.0.0.1:3443 -NT

ssh -p 17200 john@127.0.0.1
jhost> ssh -p 17299 carlton@127.0.0.1

chost> 

ihost> ssh -p 17200 john@127.0.0.1 -L 17202:127.0.0.1:3443 -NT 

ihost> ssh -p 17202 carlton@127.0.0.1
chost>



-NT at the end makes it a non interactive shell so you can't type anything to close the port forward
ssh john@ip -L 17200:Mike IP:22
ssh -p 17200 mike@127.0.0.1


SSH DYNAMIC PORT FOWARDING
###cannot create ssh tunnels with any other port besides ssh###
ihost> ssh -p 17202 carlton@127.0.0.1 -D 9050 -NT

ihost> proxychains ./Net_scan.sh 
or
ihost> proxychains nmap
or
ihost> proxychains wget -r jez-host
or 
ihost> proxychains ftp
or
ihost> prxoychains telnet or ssh possible for quick telnet or ssh otherwise don't run

etc/proxychains.conf for ip

eom full/path

ssh i-host@IP -R RHP:127.0.0.1:22 NT

ssh net1_student13@127.0.0.1 -p 16405



DAY 5 ###NETWORK ANALYSIS###
p0f (PASSIVE OS FINGERPRINTING)
 - Looks at variations in inital TTL, fragmentation flag, default IP header packet length, window size, and TCP options
 sudo p0f -r 

Network Traffic Sniffing
What makes traffic captures possible
- Libpcap
- WinPcap
- NPCAP

Network Traffic Baselining
- Snapshot of what the network looks like during a time frame
- No industry standard
- 7 days to establish the inital snapshot
- Prerequisite Information

Network Baseline Objective
- Determines the current state of your network
- Ascertain the current utilization of Network resources
- Identify normal vs peak network traffic time frames
- Verify port / protocol usage

Analyze Network Traffic Statistics
- Protocol Hierarchy (Comparing allowed protocols to see if there is a violation)
- Conversations (Whos talking to who)
- Endpoints
- I/O Graph
- IPv4 and IPv6 Statistics
- Expert Information

Wireshark and TCPDump Demos
- TCPDumps are more proficient since it processes data faster compared to wireshark

sudo tcpdump -r pcap.pcap "tcp[13] = 0x02" | awk '{print$3}' | cut -d. -f1,2,3,4 | sort | uniq

sudo tcpdump -r pcap.pcap "tcp[13] = 0x02" | awk '{print$5}' | cut -d. -f1,2,3,4 | sort | uniq



ALerts logs are stuff to look at first, logs just log data 

Data COllection Devices
Sensors
 - In-Line (Device physically on Network CAN stop traffic)
 - Passive (Not visiable on Network, is receiving copies of network CANNOT stop traffic) 


TAP
SPAN is router or switch copying info to send through a port( suseptable to packet degregation)
ARP Spoofing(MitM) Collecting data by sending it thorugh a different source 

ANOMALY DETECTION
Indicator of Attack (IOA)
- Proactive
- A series of actions that are suspicious together
- Focus on Intent
- Looks for what must happen

Indicator of Compromise (IOC)
- Reactive
- Forensic Evidence
- Provides Information that can change
  o Malware, IP addresses, exploits, signatures 

Indicators
- .exe/executable files
- NOP sled 
- Repeated Letters
- Well Known Signatures
- Mismatched Protocols
- Unusual Traffic
- Large amounts of traffic/ unusual times 

Potential Indicators of Attacks
- Destinations
- Ports 
- Public Servers/DMZs
- Off-Hours
- Network Scans
- Alarm Events
- Malware Reinfection (If Malware Continues to pop up after being deleted, Might have a user that is already set in network)

Potential Indicators of compromise
- Unusal traffic outbound
- Anomalous user login or account use
- Size of responses for HTML
- Writing changes to the registry/system files
- DNS requests 


sudo p0f -r attack_analysis1.pcap | grep "192.168.10.101" -B 4 -A 4


DAY 6 ###NETWORK TRAFFIC FILTERING###
NETWORK FILTERING
Practical Applications
- Email addresses to block unwanted email and increase productivity
- computer applications in an organization environment 
- MAC flitering - allow only specific computers access to a network
- Network Traffic

Why Filter Network Traffic
- Decrease load on network infrastructure
- Ensure data gets to intended recipients and only intended reciepients
- Block malicious traffic
- Obfuscate network internals

Filtering Concepts 
Whitelist vs Blacklist
Whitelist denys all, user has to allow connection
Blacklist allows all, user has to block connectiom

Network Device Operation Modes
- Routed
-Transparent 

Intrusion Defense
- Intrusion Dectection System
- Intrusion Prevention System

Firewall filtering methods
- Stateless (packet) Filtering (L3+4)
- Stateful Inspection (L4)
- Application Layer(L7)

First layer defense is firewall on ingress traffic

Traffic Direction
- Traffic originating from the localhost ot the remote-host
- 



NETFILTER NETWORK
- packet filtering
- stateles/stateful Firewalls
- network address and port translation (NAT and PAT)
- other packet manipulation 

IP tables
default tables are: filter, nat and mangle

sudo iptables -L 
to see default tables
sudo iptables -t NAT -L
to see default NAT tables
sudo iptables -t mangle -L
to see default mangle tables
sudo iptables -F
flushes all tables sudo iptables -A 
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
Allow anything that comes to the device and is tcp port 22 accept it
sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
Allow anything with a source input of tcp 22 out of the device 

sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT

sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 22 -j ACCEPT

sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT

sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT

sudo iptables -P OUTPUT DROP
sudo iptables -P FORWARD DROP

sudo iptables -A INPUT -p icmp --icmptype 0 -j ACCEPT

sudo iptables -L -n --line-number
shows the line number

sudo iptables -D INPUT 4

sudo iptables -P INPUT ACCEPT

sudo iptables -P OUTPUT ACCEPT

sudo iptables -P FORWARD ACCEPT


whitelisting is drop
blacklisting is allow/Accept

NFT Tables
nft add table ip Wev

sudo nft add chain ip Wev INput { type filter hook input priority 0 \; policy accept \;}

sudo nft add chain ip Wev OUTput { type filter hook output priority 0 \; policy accept \;}

sudo nft add rule ip Wev INput tcp dport 22 accept

sudo nft add rule ip Wev OUTput tcp sport 22 accept


sudo nft add rule ip Wev INput tcp dport { 21,22,23,80 } accept

sudo nft add rule ip Wev OUTput tcp sport { 21,22,23,80 } accept

sudo nft add rule ip Wev INput tcp dport { 6010,6011,6012 } accept

sudo nft add rule ip Wev OUTput tcp sport { 6010,6011,6012 } accept

sudo nft add chain ip Wev INput { type filter hook input priority 0 \; policy accept \; }

sudo nft flush ruleset

sudo nft list ruleset

sudo nft flush table ip Wev

iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 1.1.1.1

iptables -t nat -A POSTROUTING -o eth0 -j DNAT --to 10.0.0.1

iptables -t nat -A POSTROUTING -p tcp -o eth0 -j SNAT --to 1.1.1.1:9001

iptables -t nat -A POSTROUTING -p tcp -o eth0 -j DNAT --to 10.0.0.1:8080

nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11

nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3

nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade

nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080

1,2,3
467accfb25050296431008a1357eacb1_05e5fb96e2a117e01fc1227f1c4d664c_9f7a33941828bdafd2755fd20176cdf4

ACLs from router perspective 
always think from prozpective of router or filtering device perspective


common Intrusion defense systems 
- Suricata
- Bro Network Security Monitior
- Security Onion

SNORT IDS/IPS Rule - Header
[Action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
(match conditions ;)
content: "|DEAD BEEF|"











for revision snort rules start at 1000001

failed IDS/IPS 
two ways IDS/IPS can close
- fail open
- fail close




0c2ca80fad4accccce3bcecec1d238ce
be33fe60229f8b8ee22931a3820d30ac



ssh net1_student13@192.168.0.40 -R 16475:localhost:22 -p 5555

CAPSTONE




index1 3927 MzkyNw
index2 FF02::2 RkYwMjo6Mg
index3 SPOOFING U1BPT0ZJTkc
index4
index5 500 NTAw
index6


tcpdump -n -r capstone-bpf.pcap 'ip[1] >> 2 = 26 && ip[16:4] = 0x0a000067' | wc -l
packets with a DSCP of 26 being sent to the host 10.0.0.103
tcpdump -n -r capstone-bpf.pcap 'ip[6] & 0x40 = 0x40 && tcp[13] = 5' | wc -l
DONT FRAG ON AND ONLY HAS RST AND FIN FLAGS SET
tcpdump -n -r capstone-bpf.pcap 'ip[6:2] & 0x3fff != 0 ' | wc -l
What is the total number of fragmented packets?





